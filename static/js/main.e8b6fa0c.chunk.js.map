{"version":3,"sources":["forms/AddUserForm.js","forms/EditUserForm.js","Tables/UserTable.js","Tables/SongsTable.js","forms/AddSongForm.js","forms/EditSongForm.js","App.js","serviceWorker.js","index.js"],"names":["AddUserForm","props","initialFormState","id","name","username","useState","user","setUser","handleInputChange","event","target","value","onSubmit","preventDefault","addUser","type","onChange","EditUserForm","currentUser","useEffect","updateUser","onClick","setEditing","className","UserTable","users","length","map","editRow","deleteUser","colSpan","SongsTable","songs","song","editSong","AddSongForm","setSong","addSong","EditSongForm","currentSong","updateSong","setSEditing","App","setCurrentSong","Songediting","setUsers","setCurrentUser","editing","updatedUser","updatedSong","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8b6fa0c.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst AddUserForm = props => {\n\tconst initialFormState = { id: null, name: '', username: '' }\n\tconst [ user, setUser ] = useState(initialFormState)\n\n\tconst handleInputChange = event => {\n\t\tconst { name, value } = event.target\n\n\t\tsetUser({ ...user, [name]: value })\n\t}\n\n\treturn (\n\t\t<form\n\t\t\tonSubmit={event => {\n\t\t\t\tevent.preventDefault()\n\t\t\t\tif (!user.name || !user.username) return\n\n\t\t\t\tprops.addUser(user)\n\t\t\t\tsetUser(initialFormState)\n\t\t\t}}\n\t\t>\n\t\t\t<label>Name</label>\n\t\t\t<input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n\t\t\t<label>Username</label>\n\t\t\t<input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n\t\t\t<button>Add new user</button>\n\t\t</form>\n\t)\n}\n\nexport default AddUserForm","import React, { useState, useEffect } from 'react'\n\nconst EditUserForm = props => {\n  const [ user, setUser ] = useState(props.currentUser)\n\n  useEffect(\n    () => {\n      setUser(props.currentUser)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values havenâ€™t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update user</button>\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditUserForm","import React from 'react'\n\nconst UserTable = props => (\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Username</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.users.length > 0 ? (\n        props.users.map(user => (\n          <tr key={user.id}>\n            <td>{user.name}</td>\n            <td>{user.username}</td>\n            <td>\n              <button\n                onClick={() => {\n                  props.editRow(user)\n                }}\n                className=\"button muted-button\"\n              >\n                Edit\n              </button>\n              <button\n                onClick={() => props.deleteUser(user.id)}\n                className=\"button muted-button\"\n              >\n                Delete\n              </button>\n            </td>\n          </tr>\n        ))\n      ) : (\n        <tr>\n          <td colSpan={3}>No users</td>\n        </tr>\n      )}\n    </tbody>\n  </table>\n)\n\nexport default UserTable","import React from 'react'\n\nconst SongsTable = props => (\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n         <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.songs.length > 0 ? (\n        props.songs.map(song => (\n          <tr key={song.id}>\n            <td>{song.name}</td>\n            \n            <td>\n              <button\n                onClick={() => {\n                  props.editSong(song)\n                }}\n                className=\"button muted-button\"\n              >\n                Edit\n              </button>\n              \n            </td>\n          </tr>\n        ))\n      ) : (\n        <tr>\n          <td colSpan={3}>No Songs</td>\n        </tr>\n      )}\n    </tbody>\n  </table>\n)\n\nexport default SongsTable","import React, { useState } from 'react'\n\nconst AddSongForm = props => {\n\tconst initialFormState = { id: null, name: '' }\n\tconst [ song, setSong ] = useState(initialFormState)\n\n\tconst handleInputChange = event => {\n\t\tconst { name, value } = event.target\n\n\t\tsetSong({ ...song, [name]: value })\n\t}\n\n\treturn (\n\t\t<form\n\t\t\tonSubmit={event => {\n\t\t\t\tevent.preventDefault()\n\t\t\t\tif (!song.name) return\n\t\t\t\tprops.addSong(song)\n\t\t\t\tsetSong(initialFormState)\n\t\t\t}}\n\t\t>\n\t\t\t<label>Song Name</label>\n\t\t\t<input type=\"text\" name=\"name\" value={song.name} onChange={handleInputChange} />\n\t\t\t\n\t\t\t<button>Add new Song</button>\n\t\t</form>\n\t)\n}\n\nexport default AddSongForm","import React, { useState, useEffect } from 'react'\n\nconst EditSongForm = props => {\n  const [ song, setSong ] = useState(props.currentSong)\n\n  useEffect(\n    () => {\n      setSong(props.currentSong)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values havenâ€™t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setSong({ ...song, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateSong(song.id, song)\n      }}\n    >\n      <label>Song Name</label>\n      <input type=\"text\" name=\"name\" value={song.name} onChange={handleInputChange} />\n     \n      <button>Update song</button>\n      <button onClick={() => props.setSEditing(false)} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditSongForm","import React, {useState, Fragment } from 'react'\nimport AddUserForm from './forms/AddUserForm'\nimport EditUserForm from './forms/EditUserForm'\nimport UserTable from './Tables/UserTable'\nimport SongsTable from './Tables/SongsTable'\nimport AddSongForm from './forms/AddSongForm'\nimport EditSongForm from './forms/EditSongForm'\n\n\nconst App = () => {\n\t// Data\n\tconst usersData = [\n\t\t{ id: 1, name: 'Tania', username: 'floppydiskette' },\n\t\t{ id: 2, name: 'Craig', username: 'siliconeidolon' },\n\t\t{ id: 3, name: 'Ben', username: 'benisphere' },\n\t]\n\tconst songData=[\n\t\t{id:1, name:'HighwaytoHell'}\n\t]\n\t\n\tconst initialFormState = { id: null, name: '', username: '' }\n\tconst initialSFormState={id:null,name:''}\n\t// Setting state\n\tconst [songs, setSong]=useState(songData)\n\tconst [ currentSong, setCurrentSong ] = useState(initialSFormState)\n\tconst [ Songediting, setSEditing ] = useState(false)\n\n\tconst [ users, setUsers ] = useState(usersData)\n\tconst [ currentUser, setCurrentUser ] = useState(initialFormState)\n\tconst [ editing, setEditing ] = useState(false)\n\n\t// CRUD operations USERS\n\tconst addUser = user => {\n\t\tuser.id = users.length + 1\n\t\tsetUsers([ ...users, user ])\n\t}\n\n\tconst deleteUser = id => {\n\t\tsetEditing(false)\n\n\t\tsetUsers(users.filter(user => user.id !== id))\n\t}\n\n\tconst updateUser = (id, updatedUser) => {\n\t\tsetEditing(false)\n\n\t\tsetUsers(users.map(user => (user.id === id ? updatedUser : user)))\n\t}\n\n\tconst editRow = user => {\n\t\tsetEditing(true)\n\n\t\tsetCurrentUser({ id: user.id, name: user.name, username: user.username })\n\t}\n\t// CRUD Operations Songs\n\tconst updateSong = (id, updatedSong) => {\n\t\tsetSEditing(false)\n\n\t\tsetSong(songs.map(song => (song.id === id ? updatedSong : song)))\n\t}\n\n\tconst editSong = song => {\n\t\tsetSEditing(true)\n\n\t\tsetCurrentSong({ id: song.id, name: song.name })\n\t}\n\tconst addSong = song => {\n\t\tsong.id = songs.length + 1\n\t\tsetSong([ ...songs, song ])\n\t}\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t\n\t\t\t<h1>CRUD App with Hooks</h1>\n\t\t\t<div className=\"flex-row\">\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t\n\t\t\t\t\t{editing ? (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Edit user</h2>\n\t\t\t\t\t\t\t<EditUserForm\n\t\t\t\t\t\t\t\tediting={editing}\n\t\t\t\t\t\t\t\tsetEditing={setEditing}\n\t\t\t\t\t\t\t\tcurrentUser={currentUser}\n\t\t\t\t\t\t\t\tupdateUser={updateUser}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Add user</h2>\n\t\t\t\t\t\t\t<AddUserForm addUser={addUser} />\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t)}\n\t\t\t\t\t\t{Songediting ? (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Edit songs</h2>\n\t\t\t\t\t\t\t<EditSongForm\n\t\t\t\t\t\t\t\tSongediting={Songediting}\n\t\t\t\t\t\t\t\tsetSEditing={setSEditing}\n\t\t\t\t\t\t\t\tcurrentSong={currentSong}\n\t\t\t\t\t\t\t\tupdateSong={updateSong}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Add songs</h2>\n\t\t\t\t\t\t\t<AddSongForm addSong={addSong} />\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t<h2>View users</h2>\n\t\t\t\t\t<UserTable users={users} editRow={editRow} deleteUser={deleteUser} />\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t<h2>View songs</h2>\n\t\t\t\t\t<SongsTable songs={songs} editSong={editSong} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import App from './Api';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}